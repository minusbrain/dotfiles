priority -40

################
# Pre-processor

snippet ig "Include header once only guard" b
#ifndef ${1:`!p
if not snip.c:
	import string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = name
else:
	snip.rv = snip.c`}
#define $1

${0}

#endif // $1
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0:${VISUAL/(.*)/(?1::code)/}}
#endif
endsnippet

snippet linclude "#include local header (linc)" b
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet include "#include <> (inc)" b
#include <${1:.h}>
endsnippet

######################
# Language Constructs

# Loops
snippet for "for loop (for)" b
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet fors "for int loop (fori)" b
for (size_t ${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet foru "for unsigned loop (foru)" b
for (unsigned ${2:i} = 0u; $2 < ${1:count}; ${3:++$2})
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet while "while loop" b
while(${1:/* condition */})
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet do "do...while loop (do)" b
do
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
} while(${1:/* condition */});
endsnippet

# Variables
snippet const "constant object" b
const ${1:T} ${0:name}
endsnippet

snippet var "variable (var)" b
${1:T} ${0:${VISUAL}}
endsnippet

# Conditionals
snippet switch "switch" b
switch(${1})
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet case "case" b
case ${1}:
	${0}
	break;
endsnippet

snippet default "default" b
default:
	${0}
	break;
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */})
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet else "else .. (else)"
else
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet ifel "if .. else (ife)"
if (${1:/* condition */})
{
	${2:/* code */}
}
else
{
	${3:/* else */}
}
endsnippet

# Functions
snippet func "function" b
${1:void} ${2:foo}(${3})
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet dfunc "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

snippet enum "Enumeration" b
enum ${1:name}
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* values *\/)/}}
};
endsnippet

snippet typedef "typedef" b
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet struct "struct"
struct ${1:`!p snip.rv = (snip.basename or "name")`}
{
	${0}
};
endsnippet

snippet block "block of code"
{
	${0:${VISUAL}}
}
endsnippet

#############
# STD lib

snippet fprintf "fprintf ..." b
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

################
# Common/Misc

# main function
snippet main "main() (main)" b
int main(int argc, char *argv[])
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
	return 0;
}
endsnippet

snippet c(r|opyright) "Copyright notice" b
// Copyright (c) `!p
from datetime import date
snip.rv += "{}".format(date.today().year)
` by $1
endsnippet

snippet todo "TODO"
// TODO: ${0}
endsnippet

# vim:ft=snippets:

