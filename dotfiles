#!/usr/bin/env python3
import sys
import os
import shutil
import argparse
import yaml

script_path = os.path.realpath(__file__)
user_home = os.path.expanduser("~")

def load_config():
    yaml_contents = None
    try:
        with open("dotfiles.yaml", "r") as yaml_file:
            yaml_contents = yaml.safe_load(yaml_file)
    except Exception as e:
        print(f"Could not load yaml configuration: {e}")
        sys.exit(1)

    return yaml_contents

def write_config(cfg):
    try:
        with open("dotfiles.yaml", "w") as yaml_file:
            yaml.dump(cfg, yaml_file)
    except Exception as e:
        print(f"Could not write yaml configuration: {e}")
        sys.exit(1)

def normalize_path(path):
    return os.path.abspath(os.path.expanduser(path))

def install_single_dotfile(dotfile_cfg) -> bool:
    try:
        source = normalize_path(dotfile_cfg['source'])
        destination = normalize_path(dotfile_cfg['destination'])
        print(f"Installing {dotfile_cfg['name']} from {source} to {destination}")

        # Check if the destination exists
        if os.path.exists(destination) and not os.path.islink(destination):
            backup_destination = destination + '.bak'
            shutil.move(destination, backup_destination)
            print(f"Backed up existing file to {backup_destination}")
        if os.path.islink(destination):
            print(f"{destination} already is a symlink, skipping")
            return True

        # Symlink the source to the destination
        os.symlink(source, destination)
        print(f"Symlinked {source} to {destination}")
        return True
    except Exception as e:
        print(f"Could not install {dotfile_cfg['name']}: {e}")
        return False

def initial_copy_file(src, dst):
    try:
        source = normalize_path(src)
        destination = normalize_path(dst)
        print(f"Copying {source} to {destination}")
        if os.path.isdir(source):
            shutil.copytree(source, destination, symlinks=False)
        else:
            shutil.copy(source, destination)
    except Exception as e:
        print(f"Could not copy {source} to {destination}: {e}")
        sys.exit(1)

def install(args, cfg):
    for dotfile in cfg["dotfiles"]:
        install_single_dotfile(dotfile)

def add(args, cfg):
    args.destination = args.destination.replace(user_home, "~")
    print(f"Adding {args.name} from {args.source} to {args.destination}")
    cfg["dotfiles"].append({
        "name": args.name,
        "source": args.source,
        "destination": args.destination,
        "ignore": args.ignore
    })

    initial_copy_file(args.destination, args.source)
    if install_single_dotfile(cfg["dotfiles"][-1]):
        return cfg
    else:
        return None

def main():
    main_parser = argparse.ArgumentParser(description="A simple command line tool to manage dotfiles")
    subparsers = main_parser.add_subparsers(dest="subcommand", help="Subcommand to run", required=True)
    install_parser = subparsers.add_parser("install", aliases=["i"], help="Install dotfiles")
    install_parser.set_defaults(func=install)
    add_parser = subparsers.add_parser("add", aliases=["a"], help="Add a new dotfile")
    add_parser.set_defaults(func=add)
    add_parser.add_argument("name", help="Human-friendly name of the dotfile or config directory")
    add_parser.add_argument("source", help="File- or directory name in repository, e.g. dotbashrc or nvim")
    add_parser.add_argument("destination", help="The existing file to replace, e.g. ~/.bashrc or ~/.config/nvim")
    add_parser.add_argument("--ignore", "-i", nargs="+", help="Ignore pattern for files to ignore")
    args = main_parser.parse_args()
    cfg = load_config()

    if args.func:
        newcfg = args.func(args, cfg)

    if newcfg is not None:
        write_config(newcfg)

if __name__ == "__main__":
    os.chdir(os.path.dirname(script_path))
    sys.exit(main())
